#!/usr/bin/env python3
"""
Script para deletar aulas que n√£o t√™m v√≠deo
"""

import pymysql
import os
from dotenv import load_dotenv

# Carregar vari√°veis de ambiente
load_dotenv()

# Configura√ß√µes do banco
DB_USERNAME = os.getenv("DB_USERNAME", "root")
DB_PASSWORD = os.getenv("DB_PASSWORD", "")
DB_HOST = os.getenv("DB_HOST", "localhost")
DB_PORT = int(os.getenv("DB_PORT", "3306"))
DB_NAME = os.getenv("DB_NAME", "poker_academy")

def delete_classes_without_video():
    try:
        # Conectar ao banco
        connection = pymysql.connect(
            host=DB_HOST,
            port=DB_PORT,
            user=DB_USERNAME,
            password=DB_PASSWORD,
            database=DB_NAME,
            charset='utf8mb4'
        )
        
        with connection.cursor() as cursor:
            print("üîç VERIFICANDO AULAS SEM V√çDEO\n")
            
            # Listar aulas sem v√≠deo
            cursor.execute("""
                SELECT id, name, instructor, category, views, created_at
                FROM classes 
                WHERE video_path IS NULL OR video_path = ''
                ORDER BY id
            """)
            
            classes_without_video = cursor.fetchall()
            
            if not classes_without_video:
                print("‚úÖ N√£o h√° aulas sem v√≠deo para deletar!")
                return
            
            print(f"üìã ENCONTRADAS {len(classes_without_video)} AULAS SEM V√çDEO:")
            print("="*60)
            
            for id, name, instructor, category, views, created_at in classes_without_video:
                print(f"ID: {id:2d} | {name[:30]:<30} | {instructor[:15]:<15}")
                print(f"      Categoria: {category} | Views: {views} | Criado: {created_at}")
                print()
            
            # Confirmar dele√ß√£o
            print("="*60)
            print("‚ö†Ô∏è  ATEN√á√ÉO: Esta opera√ß√£o ir√° DELETAR permanentemente essas aulas!")
            print("   - Dados de progresso dos usu√°rios tamb√©m ser√£o removidos")
            print("   - Esta a√ß√£o N√ÉO pode ser desfeita")
            
            confirm = input("\nü§î Deseja continuar? Digite 'DELETAR' para confirmar: ")
            
            if confirm != 'DELETAR':
                print("‚ùå Opera√ß√£o cancelada pelo usu√°rio.")
                return
            
            print("\nüóëÔ∏è  DELETANDO AULAS SEM V√çDEO...")
            
            # Deletar progresso relacionado primeiro (devido √†s foreign keys)
            for id, _, _, _, _, _ in classes_without_video:
                cursor.execute("DELETE FROM user_progress WHERE class_id = %s", (id,))
                deleted_progress = cursor.rowcount
                if deleted_progress > 0:
                    print(f"   üóëÔ∏è  Removido progresso de {deleted_progress} usu√°rios da aula ID {id}")
            
            # Deletar visualiza√ß√µes relacionadas
            for id, _, _, _, _, _ in classes_without_video:
                cursor.execute("DELETE FROM class_views WHERE class_id = %s", (id,))
                deleted_views = cursor.rowcount
                if deleted_views > 0:
                    print(f"   üóëÔ∏è  Removidas {deleted_views} visualiza√ß√µes da aula ID {id}")
            
            # Deletar favoritos relacionados
            for id, _, _, _, _, _ in classes_without_video:
                cursor.execute("DELETE FROM favorites WHERE class_id = %s", (id,))
                deleted_favorites = cursor.rowcount
                if deleted_favorites > 0:
                    print(f"   üóëÔ∏è  Removidos {deleted_favorites} favoritos da aula ID {id}")
            
            # Deletar as aulas
            cursor.execute("""
                DELETE FROM classes 
                WHERE video_path IS NULL OR video_path = ''
            """)
            
            deleted_classes = cursor.rowcount
            connection.commit()
            
            print(f"\n‚úÖ OPERA√á√ÉO CONCLU√çDA!")
            print(f"   üìä {deleted_classes} aulas deletadas")
            print(f"   üßπ Dados relacionados tamb√©m removidos")
            
            # Verificar resultado
            print("\nüìã AULAS RESTANTES:")
            cursor.execute("SELECT COUNT(*) FROM classes")
            remaining_classes = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM classes WHERE video_path IS NOT NULL AND video_path != ''")
            classes_with_video = cursor.fetchone()[0]
            
            print(f"   üìö Total de aulas: {remaining_classes}")
            print(f"   üé• Aulas com v√≠deo: {classes_with_video}")
            
            if remaining_classes == classes_with_video:
                print("   ‚úÖ Agora todas as aulas t√™m v√≠deo!")
        
        connection.close()
        
    except Exception as e:
        print(f"‚ùå Erro ao deletar aulas: {e}")

if __name__ == "__main__":
    delete_classes_without_video()
